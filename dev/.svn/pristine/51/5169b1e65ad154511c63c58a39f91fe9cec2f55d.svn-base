#include "daisyhong_miner.h"
#include <glib.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>



#define DECLARE_COMMON_VAR \
	int OK            = 1;\
	int iLayer        = 0;\
	double DeltaT     = pTi->pTimeStep->fAct;

#define DECLARE_N_POINTER \
	PSLAYER      pSL;\
	PCLAYER      pCL;\
	PCPROFILE    pCP;\
	PCPARAM      pPA;\
	PSWATER      pSW;\
	PWLAYER      pWL;\
	PHLAYER      pHL;\
	PNFERTILIZER pNF;


/*
static double  abspower(double x, double y)
{

	double z;
	if (x < 0.0)
		{
			//sign = -1.0;
			x  *= -1.0;
		}

	if (y < 0.0)
		{
			y *= -1.0;
			if (x != (double) 0.0)  x = 1.0/x;
		}
	z = (double)pow((double)x,(double)y);
	return z;
}

*/

int daisyhong_miner(daisyhong *self)
{
 
	expertn_modul_base *xpn = &(self->parent);
	PTIME 			pTi = xpn->pTi;
	PCHEMISTRY		pCh = xpn->pCh; // Hong

	int iLayer        = 0;
	double DeltaT     = pTi->pTimeStep->fAct;
	PSLAYER      pSL;
	PCLAYER      pCL;
	PCPARAM      pPA;
	PSWATER      pSW;
	PWLAYER      pWL;
	PHLAYER      pHL;



  /******************************************************************/
  /*           Deklaration lokaler Variablen                        */
  /******************************************************************/

  /* 1. Variablen für die C-Flüsse */
  double fCAOM1DecayR,fCAOM2DecayR,fCBOM1DecayR,fCBOM2DecayR,fCSOM1DecayR,fCSOM2DecayR;
  double fCAOM1ToBOM1R,fCAOM1ToBOM2R,fCAOM1ToCO2R;
  double fCAOM2ToBOM2R,fCAOM2ToCO2R;
  double fCBOM1ToBOM2R,fCBOM1ToSOM2R,fCBOM1ToCO2R;
  double fBOM2ToSOM2C,fBOM2InternC,fBOM2ToCO2C;
  double fSOM1ToBOM1C,fSOM1ToCO2C;
  double fSOM2ToSOM1C,fSOM2ToBOM1C,fSOM2ToCO2C;
  double fBOM1_DeathC,fBOM2_DeathC;
  double fBOM1_MainC,fBOM2_MainC;
 
  /* 2. Variablen für die C/N Verhältnisse */
  double fCN_FOMSlow     = (double)100.0;   /*! org.:  100*/
  double fCN_FOMFast     = (double) 20.0;   /*! org.:  unterschiedlich*/
  double fCN_MicBiomSlow = (double) 10.0;   /*! org.:  10 */
  double fCN_MicBiomFast = (double) 8.0;    /*! org.:  6  */
  double fCN_HumusSlow   = (double) 12.0;   /*! org.:  12 */
  double fCN_HumusFast   = (double)  8.0;   /*! org.:  10 */

  /* 3. Variablen für die Aufteilung der Stoffflüsse  */
  const double fBOM1      = (double)0.5;    /* org.:  0.5 */
  const double fSOM2      = (double)0.4;    /* org.:  0.4 */
  const double fSOM1      = (double)0.1;    /* org.:  0.1 */
  const double fEff       = (double)0.55;   /* org.:  0.6 */
  
  /* 4. Sterbe- und Erhaltungsraten der Biomasse*/
  double BOM1death        = (double)0.001; /* org.:  0.01 */
  double BOM1maintenance  = (double)0.01;  /* org.:  0.1 */
  double BOM2death        = (double)0.01;  /* org.:  0.1 */
  double BOM2maintenance  = (double)0.01;  /* org.:  0.1 */
  
  /* 5. Variablen für die Abbau-Begrenzung bei mangelndem Nmin */
  double fNH4ImmMaxR = (double)0.5;
  double fNO3ImmMaxR = (double)0.5;
  double fRed,fNH4ImmN,fNO3ImmN;  

  /* 6. Variablen für die Berechnung der N-Mineralisation/N-Immobilisierung*/
  double help1,help2,help3,help4,help5,help6,help7,help8;
  double fToNH4R,fImmR,fNH4NR,fNO3NR;

  /* 7. Variablen für die Massenbilanz*/
  double fCTotal0,fNTotal0;                     /* Summe: AOM + BOM + SOM zu Beginn des Zeitschritts */
  double fCTotal1,fNTotal1;		       		   /* Summe: AOM + BOM + SOM zum Ende des Zeitschritts */
  double fCDiff,fNDiff;                         /* Differenz zwischen momentaner und anfaenglicher Summe*/
  static double fCDiffSum  = (double)0.0;
  static double fNDiffSum  = (double)0.0;

  /* 8. Variablen für die Original Reduktionsfunktionen*/
//  const double T0= (double)0;              /* Parameter für Temperatur-Korrektur */
//  const double T1= (double)20;
 
  double f1;                              /* Parameter für Feuchte-Korrektur */
  double wmin,wlow,whigh,wmax;
  
  const double C0= (double)25.0;           /* Parameter für Ton-Korrektur */
  const double C1= (double)0.02;
  
  /*UNKLAR!!!                                 Quotient aus mikrobieller Biomasse und totalem org. C [1] */
  const double fFD = (double)0.02;          /* org.: 0.02   Quotient aus Denitrifikanten und mikrobieller Biomasse  [1]  */

  /* 9 Variablen für die Anteilsberechnung */
  double afAnt[4], fC_Old, fN_Old;

//Hong
  struct ncorr corr= {(double)1,(double)1,(double)1,(double)1,(double)1,(double)1,(double)1,(double)1};

//Hong
	pSL = xpn->pSo->pSLayer;
	pCL = xpn->pCh->pCLayer;
	pPA = xpn->pCh->pCParam;
	pSW = xpn->pSo->pSWater;
	pWL = xpn->pWa->pWLayer;
	pHL = xpn->pHe->pHLayer;
	


//Hong
//SurfaceMiner(self); //exp_p durch stickstoff *self ersetzt
//Hong
//	rm    = (double)1.0;    /*orig :1.0; */			//analog crikle

for (N_SOIL_LAYERS)     //schichtweise Berechnung
  {
  /* mögliche Standardinitialisierung 
  if (SimStart(pTi))
  {
   pCL->fCFOMSlow     = (double)0.588 * pCL->fCLitter;
   pCL->fCFOMFast     = (double)0.392 * pCL->fCLitter;
   pCL->fCMicBiomSlow = (double)0.01  * pCL->fCLitter;
   pCL->fCMicBiomFast = (double)0.01  * pCL->fCLitter;
  }*/ /* Ende der Startinitialisierung */


  /***********************************************************************/
  /* Übertragen der Mengen in die spezifischen DAISY-Pools               */
  /* Litter         = AOM1 = FOMSlow                                     */
  /* Manure         = AOM2 = FOMFast                                     */
  /* Humus (Anteil) = BOM1 = MicBiomSlow                                 */
  /* Humus (Anteil) = BOM2 = MicBiomFast                                 */
  /* Humus (Anteil) = SOM1 = HumusSlow                                   */
  /* Humus (Anteil) = SOM2 = HumusFast                                   */
  /*	                                                                 */
  /* Berechnung der Anteile aus dem Humus anhand der relativen           */
  /* Verhältnisse zum Ende des vorherigen Zeitsschritts.                 */
  /***********************************************************************/
 

  pCL->fCFOMSlow = pCL->fCLitter;
  pCL->fCFOMFast = pCL->fCManure;

  pCL->fNFOMSlow = pCL->fNLitter;
  pCL->fNFOMFast = pCL->fNManure; 

  if(!SimStart(pTi))
  {
   fC_Old = pCL->fCMicBiomSlow + pCL->fCMicBiomFast +
               pCL->fCHumusSlow + pCL->fCHumusFast;

   if(fC_Old)
   {
    afAnt[0]  = pCL->fCMicBiomSlow / fC_Old;
    afAnt[1]  = pCL->fCMicBiomFast / fC_Old;
    afAnt[2]  = pCL->fCHumusSlow   / fC_Old;
    afAnt[3]  = pCL->fCHumusFast   / fC_Old;
	 	 
    pCL->fCMicBiomSlow = afAnt[0] * pSL->fCHumus;
    pCL->fCMicBiomFast = afAnt[1] * pSL->fCHumus;
    pCL->fCHumusSlow   = afAnt[2] * pSL->fCHumus;
    pCL->fCHumusFast   = afAnt[3] * pSL->fCHumus;
   }
	 
   fN_Old = pCL->fNMicBiomSlow + pCL->fNMicBiomFast +
                pCL->fNHumusSlow + pCL->fNHumusFast;

   if(fN_Old)
   {
    afAnt[0]  = pCL->fNMicBiomSlow / fN_Old;
    afAnt[1]  = pCL->fNMicBiomFast / fN_Old;
    afAnt[2]  = pCL->fNHumusSlow   / fN_Old;
    afAnt[3]  = pCL->fNHumusFast   / fN_Old;
 	 	 
    pCL->fNMicBiomSlow = afAnt[0] * pSL->fNHumus;
    pCL->fNMicBiomFast = afAnt[1] * pSL->fNHumus;
    pCL->fNHumusSlow   = afAnt[2] * pSL->fNHumus;
    pCL->fNHumusFast   = afAnt[3] * pSL->fNHumus;
   }
  }
 
 
 
  /******************************************************************/
  /*                          Reduktionsfunktionen                  */
  /******************************************************************/
   	
	/* 1. Temperatur-Reduktionsfunktion, Q10 Funktion*/
//Hong    corr.Temp = abspower(pPA->fMinerQ10,((pHL->fSoilTemp - pPA->fMinerTempB)/(double)10.0)); // refer to LEACHN miner.c, Q10-Funktion
    corr.Temp = abspowerDBL(pPA->fMinerQ10,((pHL->fSoilTemp - pPA->fMinerTempB)/(double)10.0));
	
	/* 2. Feuchte-Reduktionsfunktion, Ansatz DAISY, Bezugswert Wasserspannung */
	f1= (double)-31622770;    //pF = 6.5
    wmin = WATER_CONTENT(f1);
    f1= (double)-3160;        //pF = 2.5
    wlow = WATER_CONTENT(f1);
    f1= (double)-316;         //pF = 1.5
    whigh = WATER_CONTENT(f1);
    f1= (double)0;
    wmax = WATER_CONTENT(f1);

	corr.Feucht = Polygon4((pWL->fContAct + pWL->fIce), 
                            wmin,(double)0,  wlow, (double)1 , whigh, (double)1, 
							wmax, pPA->fMinerSatActiv);


   /* Original Reduktionsfunktionen 
    1. Temperatur-Reduktionsfunktion
	if (pHL->fSoilTemp >= T1 ) 
       corr.Temp = (double) exp((double)0.47 - (double)0.027 * (double)pHL->fSoilTemp
               + (double)0.00193 * (double)pHL->fSoilTemp * (double)pHL->fSoilTemp);
            
    else if (pHL->fSoilTemp >= T0) 
       corr.Temp = (double)0.1 * pHL->fSoilTemp;
                   
    else 
       corr.Temp = (double)0.0;                        
 */

  /* 3. Tongehalt-Reduktonsfunktion*/
    if (pSL->fClay <= C0)
	   corr.Lehm = (double)1.0 - C1 * pSL->fClay;

     else
	   corr.Lehm = (double)1.0 - C1 * C0;
	 /* Reduktionsfunktion Ende */


	/******************************************************************/
    /*    C  Mineralisierungsraten (dC/dt )                           */
    /******************************************************************/
	
	/* 1. CN Werte berechnen */
	fCN_FOMSlow     = (pCL->fNFOMSlow && pCL->fCFOMSlow) ?
    	pCL->fCFOMSlow/pCL->fNFOMSlow
    	:fCN_FOMSlow; 

	fCN_FOMFast     = (pCL->fNFOMFast && pCL->fCFOMFast) ?
    	pCL->fCFOMFast/pCL->fNFOMFast
    	:fCN_FOMFast; 

/* Wenn der CN Wert der mikrobiellen Biomasse variabel sein soll 
 	fCN_MicBiomSlow     = (pCL->fNMicBiomSlow && pCL->fCMicBiomSlow) ?
    	pCL->fCMicBiomSlow/pCL->fNMicBiomSlow
    	:fCN_MicBiomSlow; 
  	
 	fCN_MicBiomFast     = (pCL->fNMicBiomFast && pCL->fCMicBiomFast) ?
    	pCL->fCMicBiomFast/pCL->fNMicBiomFast
    	:fCN_MicBiomFast; 
*/

	fCN_HumusSlow     = (pCL->fNHumusSlow && pCL->fCHumusSlow) ?
    	pCL->fCHumusSlow/pCL->fNHumusSlow
    	:fCN_HumusSlow; 
	
	fCN_HumusFast     = (pCL->fNHumusFast && pCL->fCHumusFast) ?
    	pCL->fCHumusFast/pCL->fNHumusFast
    	:fCN_HumusFast; 
	

	/* Original-Abbaurraten, lokal veränderbar
    pCL->fFOMSlowDecMaxR      = (double)0.05;
    pCL->fFOMFastDecMaxR      = (double)0.005;
    pCL->fHumusSlowMaxDecMaxR = (double)0.00014;
    pCL->fHumusFastMaxDecMaxR = (double)0.0000027;*/
    pCL->fMicBiomSlowDecMaxR  = BOM1death + BOM1maintenance;
    pCL->fMicBiomFastDecMaxR  = BOM2death + BOM2maintenance;
    
    /* 1. Kohlenstoff-Mineralisierungs-Raten (dC/dt)*/
    fCAOM1DecayR    = pCL->fCFOMSlow     * pCL->fFOMSlowDecMaxR       * corr.Temp * corr.Feucht;
    fCAOM2DecayR    = pCL->fCFOMFast     * pCL->fFOMFastDecMaxR       * corr.Temp * corr.Feucht;
    fCBOM1DecayR    = pCL->fCMicBiomSlow * pCL->fMicBiomSlowDecMaxR   * corr.Temp * corr.Feucht * corr.Lehm;
    fCBOM2DecayR    = pCL->fCMicBiomFast * pCL->fMicBiomFastDecMaxR   * corr.Temp * corr.Feucht;
    fCSOM1DecayR    = pCL->fCHumusSlow   * pCL->fHumusSlowMaxDecMaxR  * corr.Temp * corr.Feucht * corr.Lehm;
    fCSOM2DecayR    = pCL->fCHumusFast   * pCL->fHumusFastMaxDecMaxR  * corr.Temp * corr.Feucht * corr.Lehm;

    fBOM1_DeathC    = pCL->fCMicBiomSlow * BOM1death                  * corr.Temp * corr.Feucht * corr.Lehm;
	fBOM2_DeathC    = pCL->fCMicBiomFast * BOM2death                  * corr.Temp * corr.Feucht;
    fBOM1_MainC     = pCL->fCMicBiomSlow * BOM1maintenance            * corr.Temp * corr.Feucht * corr.Lehm;
    fBOM2_MainC     = pCL->fCMicBiomFast * BOM2maintenance            * corr.Temp * corr.Feucht;


   /*************************************************************************/
   /*  Berechnung der Ammonium Bilanz bei jedem relvanten Poolübergang      */
   /*  Summe positiv = Nettomineralisierung                                 */
   /*  Summe negativ = Nettoimmobilisierung                                 */
   /*************************************************************************/	
    
   /*AOM1->BOM1*/
    help1 = fBOM1 * fCAOM1DecayR * ((double)1.0 / fCN_FOMSlow - fEff / fCN_MicBiomSlow);

   /*AOM1->BOM2*/
    help2 = ((double)1.0 - fBOM1) * fCAOM1DecayR * ((double)1.0 / fCN_FOMSlow - fEff / fCN_MicBiomFast);

   /*AOM2->BOM2*/
    help3 = fCAOM2DecayR * ((double)1.0 / fCN_FOMFast - fEff / fCN_MicBiomFast);

   /*BOM1->BOM2*/
    help4 = fCBOM1DecayR / fCN_MicBiomSlow -  (fSOM2 / fCN_HumusFast + ((double) 1.0 - fSOM2) * fEff / fCN_MicBiomFast) * fBOM1_DeathC;

	/*SOM1->BOM1*/
    help5 = fCSOM1DecayR * ((double)1.0 / fCN_HumusSlow - fEff / fCN_MicBiomSlow);

   /*BOM2->BOM2*/
    help6 = fCBOM2DecayR / fCN_MicBiomFast -  (fSOM2 / fCN_HumusFast + ((double) 1.0 - fSOM2) * fEff / fCN_MicBiomFast) * fBOM2_DeathC;

	/*SOM2->BOM1*/
    help7 = fCSOM2DecayR * ((double)1.0 / fCN_HumusFast - fSOM1 / fCN_HumusSlow - fEff / fCN_MicBiomSlow + fEff * fSOM1 / fCN_MicBiomSlow);
  

   /*Summe über alle relevanten Flüsse*/
	help8 = help1 + help2 + help3 + help4 + help5 + help6 + help7;

	/*Entscheidung ob Mineralisierung oder Immobilisierung*/
	fToNH4R = (help8 > 0) ? help8 : 0;
    fImmR   = (help8 < 0) ? (double)-1 * help8 : 0;


   /*************************************************************/
   /*     Reduktion des AOM-Abbaus bei Nmin-Mangel!             */
   /*************************************************************/

	if(fImmR)
	{
     /*Maximale Immobilisierungsraten*/
   	 fNH4ImmN = fNH4ImmMaxR * pCL->fNH4N;
     fNO3ImmN = fNO3ImmMaxR * pCL->fNO3N;
	 
     /*Berechnung des Reduktionsfaktors*/  	
     fRed = (double)1.0;                      // Reduktionsfaktor =1 => keine Reduktion 

	 if (fImmR  > (fNH4ImmN + fNO3ImmN))
          fRed = (fNH4ImmN + fNO3ImmN) / fImmR;
	    
     help1 = fRed * help1;
     help2 = fRed * help2;
	 fCAOM1DecayR  = fRed * fCAOM1DecayR;
	 fCAOM2DecayR  = fRed * fCAOM2DecayR;

	 help8 = help1 + help2 + help3 + help4 + help5 + help6 + help7;
     fImmR = help8 * (double)-1;
	}
	
	/*Übertragung auf globale Variablen*/
 	pCL->fLitterMinerR  = fCAOM1DecayR/fCN_FOMSlow;
	pCL->fManureMinerR  = fCAOM2DecayR/fCN_FOMFast;
    pCL->fHumusMinerR   = fCSOM1DecayR/fCN_HumusSlow + 
	                      fCSOM2DecayR/fCN_HumusFast;
  
	pCL->fNLitterImmobR = ((help1 + help2) < 0) ? (double)-1 * (help1 + help2) : 0;
    pCL->fNManureImmobR = (help3 < 0) ? (double)-1 * help3 : 0;

	pCL->fNImmobR = fImmR;
    pCL->fMinerR = fToNH4R;


   /********************************************************************************/
   /*    Veraenderung der C-Pools pro Zeitschritt                                  */ 
   /*    Da CN-Verhältnis in den Pools konstant ist, ist eine separate             */
   /*    Modellierung des N redundant.                                             */
   /********************************************************************************/
    
	/*Gesamt C-Mengen vor dem Zeitschritt*/
	fCTotal0 = pCL->fCFOMSlow + pCL->fCFOMFast + pCL->fCMicBiomSlow
              + pCL->fCMicBiomFast + pCL->fCHumusSlow + pCL->fCHumusFast
              + pCL->fCO2C;

    pCL->fNFOMSlow     = pCL->fCFOMSlow     / fCN_FOMSlow;
    pCL->fNFOMFast     = pCL->fCFOMFast     / fCN_FOMFast; 
    pCL->fNMicBiomSlow = pCL->fCMicBiomSlow / fCN_MicBiomSlow;
    pCL->fNMicBiomFast = pCL->fCMicBiomFast / fCN_MicBiomFast;
    pCL->fNHumusSlow   = pCL->fCHumusSlow   / fCN_HumusSlow;
    pCL->fNHumusFast   = pCL->fCHumusFast   / fCN_HumusFast;



	fNTotal0 = pCL->fNFOMSlow + pCL->fNFOMFast + pCL->fNMicBiomSlow +
			   pCL->fNMicBiomFast + pCL->fNHumusSlow + pCL->fNHumusFast +
               pCL->fNH4N + pCL->fNO3N;

	/* Die Veränderung in den Pools pro Zeitschritt (direkt, ohne Berechnung der Flüsse) */
    pCL->fCFOMSlow     -= fCAOM1DecayR * DeltaT;
    
	pCL->fCFOMFast     -= fCAOM2DecayR * DeltaT; 
    
	pCL->fCMicBiomSlow += (fEff * (fCSOM1DecayR + ((double)1.0-fSOM1) * fCSOM2DecayR
	                       + fBOM1 * fCAOM1DecayR) - fCBOM1DecayR) * DeltaT;

    pCL->fCHumusSlow   += (fSOM1*fCSOM2DecayR - fCSOM1DecayR) * DeltaT;

    pCL->fCMicBiomFast += (fEff * (((double)1.0-fSOM2) * (fBOM1_DeathC + fBOM2_DeathC) 
                          + ((double)1.0-fBOM1) * fCAOM1DecayR + fCAOM2DecayR) - fCBOM2DecayR) * DeltaT; 

    pCL->fCHumusFast   += (fSOM2 * (fBOM1_DeathC + fBOM2_DeathC) - fCSOM2DecayR) * DeltaT;

    pCL->fCO2ProdR     = (((double)1.0 - fEff) * (fCAOM1DecayR + fCAOM2DecayR + fCSOM1DecayR + fCSOM2DecayR) + fCBOM1DecayR + fCBOM2DecayR
	                      - (fSOM1 - fEff * fSOM1) * fCSOM2DecayR - (fEff + fSOM2 - fEff * fSOM2) * (fBOM1_DeathC + fBOM2_DeathC));
    
	pCL->fCO2C += pCL->fCO2ProdR * DeltaT;

   /*Die Raten pro Zeitschritt, eigentlich überflüssig aber für Punkt 4 und 5 nötig */
   /*Eventuell mit einem Fehler, da bei diesen Flüssen momentan keine Sterberate be-*/
   /*rücksichtigt wird.                                                             */

    fCAOM1ToBOM1R    = fEff * fBOM1 * fCAOM1DecayR;
    fCAOM1ToBOM2R    = fEff * ((double)1.0 - fBOM1) * fCAOM1DecayR;
    fCAOM1ToCO2R     = ((double)1.0 - fEff) * fCAOM1DecayR;

	fCAOM2ToBOM2R    = fEff * fCAOM2DecayR;
    fCAOM2ToCO2R     = ((double)1.0 - fEff) * fCAOM2DecayR;
		
		  
	fCBOM1ToBOM2R    = fEff *((double)1.0 - fSOM2) * fCBOM1DecayR;
    fCBOM1ToSOM2R    = fSOM2 * fCBOM1DecayR;
    fCBOM1ToCO2R     = ((double)1.0 - fEff) * ((double)1.0 - fSOM2) * fCBOM1DecayR;

    fBOM2InternC    = fEff * ((double)1.0 - fSOM2)* fCBOM2DecayR;  
    fBOM2ToSOM2C    = fSOM2 * fCBOM2DecayR;
    fBOM2ToCO2C     = ((double)1.0 - fEff) * ((double)1.0 - fSOM2) * fCBOM2DecayR;

    fSOM1ToBOM1C    = fEff * fCSOM1DecayR;
    fSOM1ToCO2C     = ((double)1.0 - fEff) * fCSOM1DecayR;

	fSOM2ToBOM1C    = fEff * ((double)1.0 - fSOM1) * fCSOM2DecayR;
    fSOM2ToSOM1C    = fSOM1 * fCSOM2DecayR;
    fSOM2ToCO2C     = ((double)1.0 - fEff) * ((double)1.0 - fSOM1) * fCSOM2DecayR;


    /* UNKLAR!!!!*/
    /* 4. Veraenderung des BOMD-Pools pro Zeitschritt              */
    /*    Annahme: Während Dekompostierung wachsen Denitrifikanten */
    /*             wie die restliche labile mikrobielle Biomasse   */
      pCL->fCMicBiomDenit += fFD * (fCAOM1ToBOM1R + fCAOM1ToBOM2R + fCAOM2ToBOM2R + fSOM1ToBOM1C + fSOM2ToBOM1C)
                         * DeltaT;

    /* UNKLAR!!!!*/
	/* 5. Festlegung des Csol-Pools  */
    pCL->fCsolC = (fCBOM1DecayR + fCBOM2DecayR) * fSOM2 + fSOM1ToBOM1C + fSOM2ToBOM1C ;
                        
    pCh->pCLayer->fCsolC += pCL->fCsolC;
 
 

    /********************************************************************************/
    /*        Veraenderung der N-Pools durch Mineralisierung pro Zeitschritt        */
    /********************************************************************************/

    /* 1. Ammonium-Netto-Mineralisierung/-Immobilisierung */
	
    if (fToNH4R > 0) //Mineralisierung
     
      pCL->fNH4N += fToNH4R * DeltaT;  
      
    else             //Immobilisierung
     { 
	  fNH4NR = fImmR * RelAnteil(pCL->fNH4N,pCL->fNO3N);  
      fNO3NR = fImmR * RelAnteil(pCL->fNO3N,pCL->fNH4N);  	
//	 fNH4NR = 1.0;
//	 fNO3NR = 1.0;
	  pCL->fNH4N -= fNH4NR * DeltaT; 
	  pCL->fNO3N -= fNO3NR * DeltaT;
	 }

    /* 2. Werte in den N-Pools */
    pCL->fNFOMSlow     = pCL->fCFOMSlow     / fCN_FOMSlow;
    pCL->fNFOMFast     = pCL->fCFOMFast     / fCN_FOMFast; 
    pCL->fNMicBiomSlow = pCL->fCMicBiomSlow / fCN_MicBiomSlow;
    pCL->fNMicBiomFast = pCL->fCMicBiomFast / fCN_MicBiomFast;
    pCL->fNHumusSlow   = pCL->fCHumusSlow   / fCN_HumusSlow;
    pCL->fNHumusFast   = pCL->fCHumusFast   / fCN_HumusFast;


    /********************************************************************************/
    /* Übertragen der Veränderungen auf die Pools Litter, Manure,Humus u.           */
    /********************************************************************************/

    pCL->fCLitter = pCL->fCFOMSlow; 
    pCL->fNLitter = pCL->fNFOMSlow; 
 
    pCL->fCManure = pCL->fCFOMFast; 
    pCL->fNManure = pCL->fNFOMFast; 

    pSL->fCHumus = pCL->fCMicBiomSlow + pCL->fCMicBiomFast
                   + pCL->fCHumusSlow + pCL->fCHumusFast;
	if (pSL->fCHumus<EPSILON)
		{
			pSL->fCHumus=EPSILON;
		}
    pSL->fNHumus = pCL->fNMicBiomSlow + pCL->fNMicBiomFast
                   + pCL->fNHumusSlow + pCL->fNHumusFast;

	pCL->fCSoilMicBiom = pCL->fCMicBiomSlow + pCL->fCMicBiomFast;
	pCL->fNSoilMicBiom = pCL->fNMicBiomSlow + pCL->fNMicBiomFast;
    /*Übertragen auf ExpertN-Pools Ende */



  /*Massenbilanz*/ 
  fCTotal1 = pCL->fCFOMSlow + pCL->fCFOMFast + pCL->fCMicBiomSlow
              + pCL->fCMicBiomFast + pCL->fCHumusSlow + pCL->fCHumusFast
              + pCL->fCO2C;

  fNTotal1 = pCL->fNFOMSlow + pCL->fNFOMFast +   
			 pCL->fNMicBiomSlow + pCL->fNMicBiomFast +
			 pCL->fNHumusSlow + pCL->fNHumusFast + 
             pCL->fNH4N + pCL->fNO3N;

    fCDiff = fCTotal1 - fCTotal0;    
    fCDiffSum += fCDiff;

    fNDiff = fNTotal1 - fNTotal0;
    fNDiffSum += fNDiff;
  }

	return RET_SUCCESS;
}
/*
#define G_FREE_IF_NOT_0(var)\
	{\
		if (var!=NULL)\
			{\
				g_free(var);\
				var=NULL;\
			}\
	}\

*/

