//      mpmas_coupling.c
//
//      Copyright 2010 Christian Klein <chrikle@berlios.de>
//
#include "mpmas_coupling.h"
#include <glib.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
G_DEFINE_TYPE(mpmas_coupling, mpmas_coupling, EXPERTN_MODUL_BASE_TYPE);
static void mpmas_coupling_class_init(mpmas_couplingClass *klass) {}
static void mpmas_coupling_init(mpmas_coupling *self)
{
    gchar *S;
// hier kÃ¶nnnen die Standartwerte der Variablen gesetzt werden oder Speicher reserviert werden!
// Vorsicht: Die Daten der Expert N Basis Klasse sind hier noch nicht gesetzt!
// Werden diese beim Initialisieren benoetigt, so muss eine eigene Init dafuer registriert werden!
// init example var:
//self->Plant_Mass = 20.0;
// print Output Message if Modul is used from Expert N
//S  = g_strdup_printf("%s\t%d\tInit MODUL MPMAS_COUPLING!",__FILE__,__LINE__);
//fprintf(stdout,"%s\n",S);
//fflush(stdout);
//g_free(S);
}
// Our Modul Functions:
int mpmas_coupling_Load(mpmas_coupling *self)
{
    expertn_modul_base *xpn = &(self->parent);
    self->mpmas_to_xn = (STRUCT_mpmas_to_xn*)xpn_register_var_get_pointer(xpn->pXSys->var_list,"p_grid_mpmas_to_xn");
    self->xn_to_mpmas = (STRUCT_xn_to_mpmas*)xpn_register_var_get_pointer(xpn->pXSys->var_list,"p_grid_xn_to_mpmas");
	self->xn_to_mpmas2 = (STRUCT_xn_to_mpmas2*)xpn_register_var_get_pointer(xpn->pXSys->var_list,"p_grid_xn_to_mpmas2");
    //self->WRITE_mpmas_xn =(STRUCT_WRITE_mpmas_xn*)xpn_register_var_get_pointer(xpn->pXSys->var_list,"pWRITE_mpmas_xn");
    self->new_plant = 0;
	self->simulation_days = 0;
    self->count = 0;
	self->restart = 1;
    if ((self->mpmas_to_xn==NULL) || (self->xn_to_mpmas==NULL))
        {
            PRINT_ERROR("No pmpmas_to_xn");
        }   
    return RET_SUCCESS;
}
int mpmas_coupling_Austausch(mpmas_coupling *self)
{
    expertn_modul_base *xpn = &(self->parent);
    PPLANT pPl = xpn->pPl;
    PGENOTYPE pGe = pPl->pGenotype;
    PTIME pTi = xpn->pTi;
    PSIMTIME pST = pTi->pSimTime;
    PMSOWINFO   pSI = xpn->pMa->pSowInfo;
    PMANAGEMENT  pMa = xpn->pMa;
    PSPROFILE pSo = xpn->pSo;
    PCHEMISTRY pCh = xpn->pCh;
    PNFERTILIZER fertil_first,fertil,fertil_act;
    PMIRRIGATION irr_first, irr, irr_act;

    char *S, *S2;
    char *read_filename, *read_filename2;

    int i, j, start_i;
    int fertilizer_count, irrigation_count;
    int year, month, day;
    int fertil_start_year,fertil_start_mon,fertil_start_day;

    GDate* date;
    
    if ((self->mpmas_to_xn==NULL) || (self->xn_to_mpmas==NULL))
        {
            return RET_SUCCESS;
        }

	if(self->restart == 1)
		{
			self->xn_to_mpmas2->startDay = (int)pTi->pSimTime->fTimeY;
			self->restart = 0;
		}

    get_daily_air_and_soil_temperatures(self);
	
	if (self->new_plant == 0)
        {
            if ((xpn_time_compare_date(pTi->pSimTime->iyear,pTi->pSimTime->mon,pTi->pSimTime->mday,self->mpmas_to_xn->sowDate.year,self->mpmas_to_xn->sowDate.month,self->mpmas_to_xn->sowDate.day)<=0)&&(NewDay(pTi)))
                {
                    self->new_plant = 1;
					self->daysSinceBBCH1 = 0;
					self->daysSinceBBCH2 = 0;
					self->nextMinFertAction = 0;
					self->nextOrgFertAction = 0;
					pPl->pGenotype->acCropCode = self->mpmas_to_xn->CropCode;
                    pPl->pGenotype->acCropName = self->mpmas_to_xn->CropName;
                    pSI->Day = self->mpmas_to_xn->sowDate.day;
                    pSI->Month = self->mpmas_to_xn->sowDate.month;
                    pSI->Year = self->mpmas_to_xn->sowDate.year;
                    pPl->pGenotype->acVarietyName = self->mpmas_to_xn->variety;
                    pSI->fPlantDens = self->mpmas_to_xn->sowDens;
                    pSI->fRowWidth = self->mpmas_to_xn->rowDist;
                    pSI->fSowDepth = self->mpmas_to_xn->sowDepth;
                    pPl->pModelParam->HarvestDay = self->mpmas_to_xn->harvestDate.day;
                    pPl->pModelParam->HarvestMonth = self->mpmas_to_xn->harvestDate.month;
                    pPl->pModelParam->HarvestYear = self->mpmas_to_xn->harvestDate.year;
					self->harvestAdaptive = self->mpmas_to_xn->harvestAdaptive;
					self->harvestBBCH1 = self->mpmas_to_xn->harvestBBCH1;	
					self->harvestBBCH1ExtraDays = self->mpmas_to_xn->harvestBBCH1ExtraDays;
					self->harvestBBCH2 = self->mpmas_to_xn->harvestBBCH2;
					self->harvestBBCH2ExtraDays = self->mpmas_to_xn->harvestBBCH2ExtraDays;
					
					self->numIrrig = self->mpmas_to_xn->numIrrig;
					self->numMinFert = self->mpmas_to_xn->numMinFert;
					self->numOrgFert = self->mpmas_to_xn->numOrgFert;
					
					int i;
					for (i = 0; i < self->mpmas_to_xn->numMinFert; ++i)
						self->mineralFertilization[i] = self->mpmas_to_xn->mineralFertilization[i];
						
					for ( i = 0; i < self->mpmas_to_xn->numOrgFert; ++i)	
						self->organicFertilization[i] = self->mpmas_to_xn->organicFertilization[i];
						
					for ( i = 0; i < self->mpmas_to_xn->numIrrig; ++i)
						self->irrigation[i] = self->mpmas_to_xn->irrigation[i];
					
					
                    pPl->pModelParam->cResidueCarryOff = self->mpmas_to_xn->biom_remove;
                    // maybe needs to read the plant model
                    S  = g_strdup_printf("Config.ceres.%s", pPl->pGenotype->acCropName);
                    read_filename = xpn_register_var_get_pointer(xpn->pXSys->var_list,S);
                    g_free(S);
                    if (read_filename==NULL)
                        {
                            S  = g_strdup_printf("Global_Config.options.%s", pPl->pGenotype->acCropName);
                            read_filename = xpn_register_var_get_pointer(xpn->pXSys->var_list,S);
                            g_free(S);
                            if (read_filename==NULL)
                                {
                                    S  = g_strdup_printf("Entry 'ceres.%s' or 'global.%s' is missing in your options!",pPl->pGenotype->acCropName,pPl->pGenotype->acCropName);
                                    PRINT_ERROR(S);
                                    g_free(S);
                                }
                        }
                    if (read_filename!=NULL)
                        {
                            //Read plant parameters
                            S2 = expertn_modul_base_replace_std_templates(xpn,read_filename);
                            if (S2!=NULL)
                                {
                                    read_filename = get_fullpath_from_relative(xpn->pXSys->base_path, S2);
                                    if (expertn_modul_base_GenotypeRead(xpn,pPl,read_filename)!=0)
                                        {
                                            S  = g_strdup_printf("Error Read '%s.ini'-file, check 'crop_rotation.ini' and your model options", pPl->pGenotype->acCropName);
                                            PRINT_ERROR(S);
                                            g_free(S);
                                        }
                                    read_filename2 = g_strdup_printf("%s",read_filename);
                                    free(read_filename);
                                    g_free(S2);
                                }
                        }
                    expertn_modul_base_PlantVariableInitiation(pPl, pSo, pSI);


                    irrigation_count = self->numIrrig;

                    if (irrigation_count > 0)
                        {

                            for(i = 0; i < irrigation_count; i++)
                                {
                                    irr = g_malloc0_n(1,sizeof(STIRRIGATION));
                                    irr->Day = self->irrigation[i].irrDate.day;
                                    irr->Month = self->irrigation[i].irrDate.month;
                                    irr->Year = self->irrigation[i].irrDate.year;
                                    irr->fAmount = self->irrigation[i].quantity;
                                    if (i==0)
                                        {
                                            irr_first = irr;
                                            irr_act = irr;
                                        }
                                    else
                                        {
                                            irr_act->pNext = irr;
                                            irr->pBack = irr_act;
                                            irr_act = irr_act->pNext;
                                        }
                                }
                            if (irrigation_count != 0)
                                {
                                    irr = g_malloc0_n(1,sizeof(STIRRIGATION));
                                    irr->Day = 0;
                                    irr->Month = 0;
                                    irr->Year = 0;
                                    irr_act->pNext = irr;
                                    irr->pBack = irr_act;
                                    irr_act = irr_act->pNext;
                                }
                            pMa->pIrrigation = irr_first;

                        }


                }//end new configuration necessary
        } //end self->new_plant = 0;
    // XN to MPMAS
    //if ((xpn_time_compare_date(pTi->pSimTime->iyear,pTi->pSimTime->mon,pTi->pSimTime->mday,pPl->pModelParam->HarvestYear,pPl->pModelParam->HarvestMonth,pPl->pModelParam->HarvestDay)==0)&&(NewDay(pTi)))
    
	if (NewDay(pTi))
	{
		if (checkIfMineralFertilization(self) == 1) 
		{
			fertil = g_malloc0_n(1,sizeof(STNFERTILIZER));
			fertil_first = g_malloc0_n(1,sizeof(STNFERTILIZER));
			fertil->acName = g_strdup_printf("Mineral fertilizer");
			fertil->Day = pTi->pSimTime->mday;
            fertil->Month = pTi->pSimTime->mon;
            fertil->Year = pTi->pSimTime->iyear;
			fertil->fNO3N = self->mineralFertilization[self->nextMinFertAction].no3n;
            fertil->fNH4N = self->mineralFertilization[self->nextMinFertAction].nh4n;
            fertil->fUreaN = self->mineralFertilization[self->nextMinFertAction].urea;
			fertil->fTotalN = fertil->fNO3N + fertil->fNH4N + fertil->fUreaN;
			fertil->acCode =  self->mineralFertilization[self->nextMinFertAction].code;
			fertil->pNext = fertil_first;
            fertil_first->pBack = fertil;											
			pMa->pNFertilizer = NULL;
			pMa->pNFertilizer = fertil;
			self->nextMinFertAction++;
		}

		if (checkIfOrganicFertilization(self) == 1) 
		{
			fertil = g_malloc0_n(1,sizeof(STNFERTILIZER));
			fertil_first = g_malloc0_n(1,sizeof(STNFERTILIZER));
			fertil->acName = g_strdup_printf("Organic fertilizer");
			fertil->Day = pTi->pSimTime->mday;
            fertil->Month = pTi->pSimTime->mon;
            fertil->Year = pTi->pSimTime->iyear;
			fertil->fDryMatter = self->organicFertilization[self->nextOrgFertAction].drymatter;
            fertil->fNH4N = self->organicFertilization[self->nextOrgFertAction].nh4n;
			fertil->fNorgManure = self->organicFertilization[self->nextOrgFertAction].org_subst;
			fertil->fTotalN = fertil->fNO3N + fertil->fNH4N + fertil->fUreaN;
			fertil->acCode =  self->organicFertilization[self->nextOrgFertAction].code;
			fertil->pNext = fertil_first;
            fertil_first->pBack = fertil;											
			pMa->pNFertilizer = NULL;
			pMa->pNFertilizer = fertil;
			self->nextOrgFertAction++;
		}

	
		if ((1 == checkIfHarvest(self)) && (1 == self->new_plant))
			{
				PSPROFILE 	pSo = xpn->pSo;
				PSLAYER		pSL;
				PCLAYER		pCL;

				double nmin0_30, nmin30_60, nmin60_90;
				double depth0_30, depth30_60, depth60_90;
				double actdepth;
				double EPSILON;

				EPSILON = 1e-9;

				nmin0_30 = 0.0;
				nmin30_60 = 0.0;
				nmin60_90 = 0.0;

				actdepth = 0.0;

				depth0_30 = 0.0;
				depth30_60 = 0.0;
				depth60_90 = 0.0;

				for (pCL = xpn->pCh->pCLayer->pNext, pSL = pSo->pSLayer->pNext;  //start
				(pSL->pNext != NULL);                     //end
				pSL = pSL->pNext,pCL=pCL->pNext)          //step
				{
				actdepth += pSL->fThickness; //mm
				if (actdepth <= 300.0)
					{
					depth0_30 += pSL->fThickness;
					nmin0_30 += (pCL->fNO3N + pCL->fNH4N) * pSL->fThickness;
					}
				if ((actdepth > 300.0) && (actdepth <= 600.0))
					{
					depth30_60 += pSL->fThickness;
					nmin30_60 += (pCL->fNO3N + pCL->fNH4N) * pSL->fThickness;
					}
				if ((actdepth > 600.0) && (actdepth <= 900.0))
					{
					depth60_90 += pSL->fThickness;
					nmin60_90 += (pCL->fNO3N + pCL->fNH4N) * pSL->fThickness;
					}
				if (actdepth > 900.0)
					break;
				}

			self->xn_to_mpmas->Nmin0_30 = nmin0_30 / (depth0_30+EPSILON);
			self->xn_to_mpmas->Nmin30_60 = nmin30_60 / (depth30_60+EPSILON);
			self->xn_to_mpmas->Nmin60_90 = nmin60_90 / (depth60_90+EPSILON);
				
            self->new_plant = 0;
            self->xn_to_mpmas->fruitDryWeight = pPl->pBiomass->fFruitWeight;
            self->xn_to_mpmas->stemLeafDryWeight = pPl->pBiomass->fLeafWeight + pPl->pBiomass->fStemWeight;
            //self->xn_to_mpmas->Nmin = pCh->pCBalance->fNO3NProfile;
			pPl->pModelParam->HarvestDay=pTi->pSimTime->mday;
			pPl->pModelParam->HarvestMonth==pTi->pSimTime->mon;
			pPl->pModelParam->HarvestYear==pTi->pSimTime->iyear;
			}
	}
    if ((xpn_time_compare_date(pTi->pSimTime->iyear,pTi->pSimTime->mon,pTi->pSimTime->mday,self->mpmas_to_xn->stopDate.year,self->mpmas_to_xn->stopDate.month,self->mpmas_to_xn->stopDate.day)==0)&&(NewDay(pTi)))
        {
			self->xn_to_mpmas2->stopDay = (int)pTi->pSimTime->fTimeY;
			self->restart = 1;
            return 2;
        }
		
    //if ((xpn_time_compare_date(pTi->pSimTime->iyear,pTi->pSimTime->mon,pTi->pSimTime->mday,pPl->pModelParam->HarvestYear,pPl->pModelParam->HarvestMonth,pPl->pModelParam->HarvestDay)>0)&&(NewDay(pTi)))
    //      printf("plant growth %d maturity %d \n", pPl->pDevelop->bPlantGrowth, pPl->pDevelop->bMaturity);
    //self->WRITE_mpmas_xn->mass=self->Plant_Mass;
    return RET_SUCCESS;
}

//NEW:
//----------------------------------------------------
//Determine if crop is to be harvested today
//function to be called once a day
//return codes: 0 - no, 1- yes 
//requires a counter 'daysSinceBBCH2' to be maintained within caller
int checkIfHarvest(mpmas_coupling *self) 
	{
	expertn_modul_base *xpn = &(self->parent);
	
	PPLANT pPl = xpn->pPl;
    PTIME pTi = xpn->pTi;
	
	int currentBBCH;
	int currentDay, currentMonth, currentYear;
	
	currentBBCH = pPl->pDevelop->fDevStage;
	
	currentYear = pTi->pSimTime->iyear;
	currentMonth = pTi->pSimTime->mon;
	currentDay = pTi->pSimTime->mday;
	
	//If the decision is not adaptive, no harvest at this day
	if ( ! (self->harvestAdaptive) ) 
	{	
			//first check fixed harvest date and return 1 if date has been reached
			//If the decision is not marked as adaptive, it is the only criterion
			//If the decision is adaptive it serves as a backstop and should be set to the latest possible harvest
		if (currentDay == pPl->pModelParam->HarvestDay
		&& currentMonth == pPl->pModelParam->HarvestMonth
		&& currentYear == pPl->pModelParam->HarvestYear ) 
			{
			return 1;
			}
		return 0;
	}
	//If the decision is adaptive ...
	else {
		//check whether maturity (BBCH1) has been reached
		if (currentBBCH >= self->harvestBBCH1 ) {
			if (self->daysSinceBBCH1 >= self->harvestBBCH1ExtraDays) {
				return 1;
			}
			//if we are > BBCH1, but not over the limit, increase the counter of days
			else {
				self->daysSinceBBCH1 += 1;
			}
		}
		//if maturity has not been reached, but we are close (> BBCH2)
		// check the number of days for which we have been > BBCH2
		// and harvest in case we are over the limit given for that stage 
		//(this is because in some cases the actual maturity will not be reached at all)
		else if (currentBBCH >= self->harvestBBCH2 ) {
			if (self->daysSinceBBCH2 >= self->harvestBBCH2ExtraDays) {
				return 1;
			}
			//if we are > BBCH2, but not over the limit, increase the counter of days
			else {
				self->daysSinceBBCH2 += 1;
				return 0;
			}
		}
		else if (currentDay == pPl->pModelParam->HarvestDay
		&& currentMonth == pPl->pModelParam->HarvestMonth
		&& currentYear == pPl->pModelParam->HarvestYear ) 
			{
			return 1;
			}
	}
	return 0;
}
//---------------------------------------
//Determine if next mineral fertilizing event is to take place today
//function to be called once a day
//return codes: 0 - no, 1- yes
//assumes that the counter which fertilization action is next 'nextMinFertAction' is maintained by the caller
int checkIfMineralFertilization(mpmas_coupling *self)
{

	expertn_modul_base *xpn = &(self->parent);
	
	PPLANT pPl = xpn->pPl;
    PTIME pTi = xpn->pTi;
	
	int currentBBCH;
	int currentDay, currentMonth, currentYear;
	
	currentBBCH = pPl->pDevelop->fDevStage;
	
	currentYear = pTi->pSimTime->iyear;
	currentMonth = pTi->pSimTime->mon;
	currentDay = pTi->pSimTime->mday;
	
	//security check to make sure the next fertilization action is a valid action
	if (self->nextMinFertAction >= XNMPMASMINFERTSLOTS || self->nextMinFertAction >= self->numMinFert ) {
		return 0;
	}
	//if timing of fertilization is adaptive, check whether indicated BBCH stage has been reached
	if ( self->mineralFertilization[self->nextMinFertAction].adaptive ) {	
		if (currentBBCH >= self->mineralFertilization[self->nextMinFertAction].bbch)
			return 1;
		else
			return 0;
	}
	//else if timing of fertilization is fixed, check whether indicated date has been reached
	else {
		if (currentDay == self->mineralFertilization[self->nextMinFertAction].fertDate.day 
			&& currentMonth == self->mineralFertilization[self->nextMinFertAction].fertDate.month 
			&& currentYear == self->mineralFertilization[self->nextMinFertAction].fertDate.year ) {
			return 1;
		}

		return 0;
	}
	return 0; //actually never reached
}

int checkIfOrganicFertilization(mpmas_coupling *self)
{

	expertn_modul_base *xpn = &(self->parent);
	
	PPLANT pPl = xpn->pPl;
    PTIME pTi = xpn->pTi;
	
	int currentBBCH;
	int currentDay, currentMonth, currentYear;
	
	currentBBCH = pPl->pDevelop->fDevStage;
	
	currentYear = pTi->pSimTime->iyear;
	currentMonth = pTi->pSimTime->mon;
	currentDay = pTi->pSimTime->mday;
	
	//security check to make sure the next fertilization action is a valid action
	if (self->nextOrgFertAction >= XNMPMASORGFERTSLOTS || self->nextOrgFertAction >= self->numOrgFert ) {
		return 0;
	}
	//if timing of fertilization is adaptive, check whether indicated BBCH stage has been reached
	if ( self->organicFertilization[self->nextOrgFertAction].adaptive ) {	
		if (currentBBCH >= self->organicFertilization[self->nextOrgFertAction].bbch)
			return 1;
		else
			return 0;
	}
	//else if timing of fertilization is fixed, check whether indicated date has been reached
	else {
		if (currentDay == self->organicFertilization[self->nextOrgFertAction].orgfertDate.day 
			&& currentMonth == self->organicFertilization[self->nextOrgFertAction].orgfertDate.month 
			&& currentYear == self->organicFertilization[self->nextOrgFertAction].orgfertDate.year ) {
			return 1;
		}

		return 0;
	}
	return 0; //actually never reached
}

int get_daily_air_and_soil_temperatures(mpmas_coupling *self)
{
	expertn_modul_base *xpn = &(self->parent);
	PTIME pTi = xpn->pTi;
	PCLIMATE pCl = xpn->pCl;
	PWEATHER pWe = pCl->pWeather;
	PHEAT pHe = xpn->pHe;
	PSPROFILE pSo = xpn->pSo;
	PWATER pWa = xpn->pWa;
	PSLAYER  pSL;
	PWLAYER  pWL;
	PHLAYER pHL;
	
	double dt;
	
	double depth, act_depth;
	
	int i;
	
	int dayofyear;

	if ((pTi->pSimTime->fTimeY==self->temperature.fTimeY_save) && (pTi->pSimTime->iyear == self->temperature.iyear_save)) {
		return RET_SUCCESS;
	} else {
		self->temperature.fTimeY_save = pTi->pSimTime->fTimeY;
		self->temperature.iyear_save = pTi->pSimTime->iyear;
	}

	dt = pTi->pTimeStep->fAct;


	if ((int)NewDay(pTi)) {
		
		dayofyear = ((int)pTi->pSimTime->fTimeY) - 1; //average written for previous day, when new day has already started (and index < 0)
		if (dayofyear == -1)
		{
			dayofyear = 365 + is_leap_year(pTi->pSimTime->iyear - 1) -1;
		}
		
		
		self->temperature.fTempMax = self->__temperature.fTempMax;
		self->temperature.fTempMin = self->__temperature.fTempMin;
		self->temperature.fTempAve = self->__temperature.fTempAve;
		self->temperature.fTempSoil5cm = self->__temperature.fTempSoil5cm;

		if(self->simulation_days >= 1)
			{
			self->xn_to_mpmas2->airTemp[dayofyear] = self->__temperature.fTempAve;
			self->xn_to_mpmas2->topsoilTemp[dayofyear] = self->__temperature.fTempSoil5cm;
			}
		
		//printf("%f %f %f %f \n", self->temperature.fTempMax, self->temperature.fTempMin, self->temperature.fTempAve, self->temperature.fTempSoil5cm );

		self->__temperature.fTempMax= -99.0;
		self->__temperature.fTempMin= 99.0;		
		self->__temperature.fTempAve= 0.0;
		self->__temperature.fTempSoil5cm = 0.0;
		self->simulation_days++;
		
	} else {
		if ((pWe->fTempAir > self->__temperature.fTempMax)&&(pTi->pSimTime->fTimeDay > 0.5)) {
			self->__temperature.fTempMax = pWe->fTempAir_daily_models;
		}
		if ((pWe->fTempAir < self->__temperature.fTempMin)&&(pTi->pSimTime->fTimeDay < 0.5)) {
			self->__temperature.fTempMin = pWe->fTempAir_daily_models;
		}

		self->__temperature.fTempAve += pWe->fTempAir_daily_models * dt;

		depth = 0.05; //m
		act_depth = 0.0; //m

		for(i=0,pSL=pSo->pSLayer->pNext,pHL=pHe->pHLayer->pNext, pWL=pWa->pWLayer->pNext; pSL->pNext!=NULL; pSL=pSL->pNext, pHL=pHL->pNext, pWL=pWL->pNext, i++)
			{
			act_depth +=pSL->fThickness*1.0e-3; // mm -> m
			if (act_depth >= depth)
				{
				self->__temperature.fTempSoil5cm += pHe->pHLayer->pNext->fSoilTemp * dt;
				break;
				}
			}


	}

	/*self->weather.fTempAve = *(self->TairMean);
	self->weather.fTempMin = *(self->TairMin);
	self->weather.fTempMax = *(self->TairMax);
	self->weather.fDaylySolRad = *(self->fSolRad);*/
	return RET_SUCCESS;
}

//END NEW

